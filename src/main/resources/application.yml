app:

  # set the name of your application (e.g. books, recipes, movies, etc..)
  name: entity-persistence-gateway

  # shortcode is going to be used for:
  # - prefix for generated request id for each request
  # - prefix for the role names (e.g. tarcinapp.member)
  # - jmx domain name, if jmx is enabled
  shortcode: "tarcinapp"

  debug: false

  jmx: false

  # a request id will be assigned to each http request for the proxied service. request id will be passed within the header you specify below
  requestHeaders:
    requestId: "X-Request-Id"

  auth:
    #Leave "false" if you dont want to authenticate requests. See .README.
    rs256PublicKey: "false" 

    # Set issuer name of JWT
    issuer: keycloak

    # configure the allowable clock skew in seconds for JWT verification
    clockSkewSeconds: 60

  inbound:
    address: 0.0.0.0
    port: 8081
    baseUri: /api/v1/
    metricsEnabled: true
    cors:
      allowedOrigins: "http://localhost:8080"
      allowedMethods: "GET, POST, PUT, PATCH, DELETE"
      allowedHeaders: "Accept, Authorization, Cache-Control, Connection, Content-Type, Host, Origin, Referer, User-Agent, Vary, X-Geolocation, X-Requested-With"
      exposedHeaders: "Location, Content-Type"
      allowCredentials: true
      maxAge: 3600

  caching:
    enabled: true
    timeToLive: 6h
    size: 50MB

  # configuration of the host which serves the entity-persistence-service or entity-persistence-service. 
  backend:
    protocol: http
    host: entity-persistence-service
    port: 80
    baseUri: '/'

  # configuration of the entity-persistence-gateway-policies
  opa:
    protocol: https
    host: entity-persistence-gateway-policies
    port: 443

  # logging configuration
  logging:
    tarcinapp: INFO
    http: INFO
    gateway: INFO
    redisson: INFO

  # predefined field sets
  fieldsets:
    managed:
      show: _id, _kind, _slug, _visibility, _version, _ownerUsers, _ownerGroups, _createdDateTime, _lastUpdatedDateTime, _lastUpdatedBy, _createdBy, _validFromDateTime, _validUntilDateTime, _idempotencyKey, _viewerUsers, _viewerGroups
    unmanaged:
      hide: _slug, _visibility, _version, _ownerUsers, _ownerGroups, _createdDateTime, _lastUpdatedDateTime, _lastUpdatedBy, _createdBy, _validFromDateTime, _validUntilDateTime, _idempotencyKey, _viewerUsers, _viewerGroups
  
  # predefined queriers
  queries:

    # ?q=my
    my: "'sets[owners][userIds]='+#userId"

    # ?q=actives
    actives: "'sets[actives]'"

    # ?q=inactives
    inactives: "'sets[inactives]'"

    # ?q=name&name={name}
    name: "'filter[where][_name]=' + #query['name']"

    # ?q=slug&slug={slug}
    slug: "'filter[where][_slug]=' + #query['slug']"

  # set false if you want to prevent loopback notation in query parameters
  allowLoopbackQueryNotation: true
  
  routes:
    disabled: updateAllEntities, updateAllEntitiesByKindPath, updateAllLists

  # base schema used for all managed fields. 
  schemas:
    anyRecordBase: '{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"_slug":{"type":"string"},"_createdDateTime":{"type":"string","format":"date-time"},"_lastUpdatedDateTime":{"type":"string","format":"date-time"},"_validFromDateTime":{"type":"string","format":"date-time","nullable":true},"_validUntilDateTime":{"type":"string","format":"date-time","nullable":true},"_visibility":{"type":"string","enum":["public","protected","private"]},"_version":{"type":"number"},"_lastUpdatedBy":{"type":"string"},"_createdBy":{"type":"string"},"_ownerUsers":{"type":"array","items":{"type":"string"}},"_ownerGroups":{"type":"array","items":{"type":"string"}},"_viewerUsers":{"type":"array","items":{"type":"string"}},"_viewerGroups":{"type":"array","items":{"type":"string"}}},"required":[]}'
    
  # Configurations beyond this line are rarely modified. Change them only if you fully understand the impact.
  
  # this map is used as a reference to configure 'management.endpoints.web.exposure.include' value, according to the 'app.inbound.metricsEnabled'
  metricsEndpointsMap:
    "true": gateway,health,metrics
    "false": ""

---

debug: ${app.debug}

server:
  port: ${app.inbound.port}
  address: ${app.inbound.address}
  compression: 
    enabled: true
    mime-types: application/json

---

spring:
  application: 
    name: ${app.name}
  data:
    redis: 
      host: gateway-redis-master
      port: 6379
      database: 0
      password: your-password-from-k8s-secret #Override this field with a value from Kubernetes secret. See .README.
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: ${app.inbound.cors.allowedOrigins}
            allowedMethods: ${app.inbound.cors.allowedMethods}
            allowedHeaders: ${app.inbound.cors.allowedHeaders}
            exposedHeaders: ${app.inbound.cors.exposedHeaders}
            allowCredentials: ${app.inbound.cors.allowCredentials}
            maxAge: ${app.inbound.cors.maxAge}
      metrics:
        enabled: ${app.inbound.metricsEnabled}
      filter:
        local-response-cache: 
          enabled: ${app.caching.enabled}
          size: ${app.caching.size}
          time-to-live: ${app.caching.timeToLive}
      routes:
      # entity controller
      - id: createEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities
        - Method=POST
        filters:
        - name: RequestSize
        - name: CheckIfRouteEnabled
          args:
            maxSize: 1KB
        - RewritePath=${app.inbound.baseUri}entities, ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/createEntity/policy
        - name: AcquireLockForCreation
        - name: AddManagedFieldsInCreation
        - name: ApplyFieldsetConfig
          args:
            recordType: entities
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForSingleItemResponses
          args:
            policyName: /policies/fields/entities/policy
      - id: updateAllEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}entities, ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateAllEntities/policy
        - RemoveRequestHeader=Authorization
      - id: findEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}entities, ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntities/policy
        - name: PreventStringifiedJsonFilter
        - name: ApplyFieldsetConfig
          args:
            recordType: entities
        - name: ConvertToLoopbackQuery
        - name: AddSetsToQuery
          args:
            recordType: entities
        - name: PreventQueryByForbiddenFields
          args:
            policyName: /policies/fields/entities/policy
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForMultiItemResponses
          args:
            policyName: /policies/fields/entities/policy
      - id: countEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/count
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}entities, ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/countEntities/policy
        - name: AddSetsToQuery
          args:
            recordType: entities
        - RemoveRequestHeader=Authorization
      - id: findEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/{recordId}
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}entities, ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntityById/policy
        - RemoveRequestHeader=Authorization
        - LocalResponseCache=${app.caching.timeToLive},${app.caching.size}
        - name: ApplyFieldsetConfig
          args:
            recordType: entities
        - name: DropFieldsForSingleItemResponses
          args:
            policyName: /policies/fields/entities/policy
      - id: updateEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/{recordId}
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}entities, ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateEntityById/policy
        - RemoveRequestHeader=Authorization
      - id: replaceEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/{recordId}
        - Method=PUT
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}entities, ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/replaceEntityById/policy
        - name: AddForbiddenFieldsFromOriginalToPayloadInReplace
          args:
            policyName: /policies/fields/entities/policy
        - name: AddManagedFieldsFromOriginalToPayloadInReplace
        - RemoveRequestHeader=Authorization
      - id: deleteEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/{recordId}
        - Method=DELETE
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}entities, ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/deleteEntityById/policy
        - RemoveRequestHeader=Authorization
      # list controller
      - id: createList
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}lists
        - Method=POST
        filters:
        - name: RequestSize
        - name: CheckIfRouteEnabled
          args:
            maxSize: 1KB
        - RewritePath=${app.inbound.baseUri}lists, ${app.backend.baseUri}lists
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/createList/policy
        - name: AcquireLockForCreation
        - name: AddManagedFieldsInCreation
        - name: ApplyFieldsetConfig
          args:
            recordType: lists
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForSingleItemResponses
          args:
            policyName: /policies/fields/lists/policy
      - id: updateAllLists
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}lists
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}lists, ${app.backend.baseUri}lists
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateAllLists/policy
        - RemoveRequestHeader=Authorization
      - id: findLists
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}lists
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}lists, ${app.backend.baseUri}lists
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findLists/policy
        - name: PreventStringifiedJsonFilter
        - name: ApplyFieldsetConfig
          args:
            recordType: lists
        - name: ConvertToLoopbackQuery
        - name: AddSetsToQuery
          args:
              recordType: lists
        - name: PreventQueryByForbiddenFields
          args:
            policyName: /policies/fields/lists/policy
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForMultiItemResponses
          args:
            policyName: /policies/fields/lists/policy
      - id: countLists
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}lists/count
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}lists, ${app.backend.baseUri}lists
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/countLists/policy
        - name: AddSetsToQuery
          args:
            recordType: lists
        - RemoveRequestHeader=Authorization
      - id: findListById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}lists/{recordId}
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}lists, ${app.backend.baseUri}lists
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findListById/policy
        - RemoveRequestHeader=Authorization
        - LocalResponseCache=${app.caching.timeToLive},${app.caching.size}
        - name: ApplyFieldsetConfig
          args:
            recordType: lists
        - name: DropFieldsForSingleItemResponses
          args:
            policyName: /policies/fields/lists/policy
      - id: updateListById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}lists/{recordId}
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}lists, ${app.backend.baseUri}lists
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateListById/policy
        - RemoveRequestHeader=Authorization
      - id: replaceEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}lists/{recordId}
        - Method=PUT
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}lists, ${app.backend.baseUri}lists
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/replaceListById/policy
        - name: AddForbiddenFieldsFromOriginalToPayloadInReplace
          args:
            policyName: /policies/fields/lists/policy
        - name: AddManagedFieldsFromOriginalToPayloadInReplace
        - RemoveRequestHeader=Authorization
      - id: deleteListById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}lists/{recordId}
        - Method=DELETE
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}lists, ${app.backend.baseUri}lists
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/deleteListById/policy
        - RemoveRequestHeader=Authorization
      # relations controller on entity
      - id: getRelationsOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/{recordId}/relations
        - Method=GET
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: createRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/{recordId}/relations
        - Method=POST
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/{recordId}/relations
        - Method=PATCH
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: deleteRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}entities/{recordId}/relations
        - Method=DELETE
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      # relations controller
      - id: createRelation
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=${app.inbound.baseUri}relations
        - Method=POST
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateAllRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=${app.inbound.baseUri}relations
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: findRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=${app.inbound.baseUri}relations
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: countRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations/count
        predicates:
        - Path=${app.inbound.baseUri}relations/count
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: findRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}relations/{recordId}
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}relations/{recordId}
        - Method=PATCH
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: RequestSize
          args:
            maxSize: 1KB
      - id: replaceRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}relations/{recordId}
        - Method=PUT
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: RequestSize
          args:
            maxSize: 1KB
      - id: deleteRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}relations/{recordId}
        - Method=DELETE
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      #explorer controller
      - id: explorer
        uri: no://op
        predicates:
        - Path=${app.inbound.baseUri}explorer
        filters:
        - name: SetStatus
          args:
            status: 404
      # kind path mapping
      - id: createEntityByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}
        - Method=POST
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*), ${app.backend.baseUri}entities
        - name: PlaceKindNameInRequestForEntityManagement
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: ValidateEntityRequestBody
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/createEntity/policy
        - name: AddManagedFieldsInCreation
        - name: AcquireLockForCreation
        - name: ApplyFieldsetConfig
          args:
            recordType: entities
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForSingleItemResponses
          args:
            policyName: /policies/fields/entities/policy
      - id: findAllEntitiesByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*), ${app.backend.baseUri}entities
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntities/policy
        - name: PreventStringifiedJsonFilter
        - name: ConvertToLoopbackQuery
        - name: ConvertKindPathToQueryForFindEntities
        - name: PreventQueryByForbiddenFields
          args:
            policyName: /policies/fields/entities/policy
        - name: ApplyFieldsetConfig
          args:
            recordType: entities
        - name: AddSetsToQuery
          args:
            recordType: entities
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForMultiItemResponses
          args:
            policyName: /policies/fields/entities/policy
      - id: replaceEntityByIdKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/{recordId}
        - Method=PUT
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*)\/(?<recordId>.*), ${app.backend.baseUri}entities/${recordId}
        - name: PlaceKindNameInRequestForEntityManagement
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: ValidateEntityRequestBody
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/replaceEntityById/policy
        - name: AddForbiddenFieldsFromOriginalToPayloadInReplace
          args:
            policyName: /policies/fields/entities/policy
        - name: AddManagedFieldsFromOriginalToPayloadInReplace
        - RemoveRequestHeader=Authorization
      - id: countEntitiesByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/count
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*), ${app.backend.baseUri}entities/count
        - name: ConvertKindPathToQueryForFindEntities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/countEntities/policy
        - name: AddSetsToQuery
          args:
            recordType: entities
        - RemoveRequestHeader=Authorization
      - id: updateAllEntitiesByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*), ${app.backend.baseUri}entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateAllEntities/policy
        - RemoveRequestHeader=Authorization
      - id: findEntityByIdByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/{recordId}
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*)\/(?<recordId>.*), ${app.backend.baseUri}entities/${recordId}
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntityById/policy
        - RemoveRequestHeader=Authorization
        - LocalResponseCache=${app.caching.timeToLive},${app.caching.size}
        - name: ApplyFieldsetConfig
          args:
            recordType: entities
        - name: DropFieldsForSingleItemResponses
          args:
            policyName: /policies/fields/entities/policy
      - id: updateEntityByIdByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/{recordId}
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*)\/(?<recordId>.*), ${app.backend.baseUri}entities/${recordId}
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: ValidateEntityRequestBody
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateEntityById/policy
        - RemoveRequestHeader=Authorization
      - id: deleteEntityByIdByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/{recordId}
        - Method=DELETE
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*)\/(?<recordId>.*), ${app.backend.baseUri}entities/${recordId}
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/deleteEntityById/policy
        - RemoveRequestHeader=Authorization
  web:
    resources:
      chain:
        enabled: false
  jmx:
    enabled: ${app.jmx}
    default-domain: ${app.shortcode}
---

#
management:
  endpoints:
    web:
      exposure:
        # this section configured automatically according to the value of app.inbound.metricsEnabled value
        include: ${app.metricsEndpointsMap.${app.inbound.metricsEnabled}:''}