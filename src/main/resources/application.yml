app:
  auth:
    rs256PublicKey: "false" #Override this field with a value from Kubernetes secret. Leave "false" if you dont want to authenticate requests. See .README.
  requestHeaders:
    requestId: "TarcinappRequestId"
  requestIdPrefix: "TAPP"
  backend:
    protocol: http
    host: entity-persistence-service
    port: 80
spring:
  application: 
    name: entity-persistence-gateway
  redis: 
    host: gateway-redis-master
    port: 6379
    database: 0
    password: your-password-from-k8s-secret #Override this field with a value from Kubernetes secret. See .README.
  cloud:
    gateway:
      routes:
      # entity controller
      - id: createEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/generic-entities
        predicates:
        - Path=/generic-entities
        - Method=POST
        filters:
        - name: RequestSize
          args:
            maxSize: 4KB
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/createEntity/policy
        - name: AddManagedFieldsInCreation
      - id: updateAllEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/generic-entities
        predicates:
        - Path=/generic-entities
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 4KB
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateAllEntities/policy
      - id: findEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/generic-entities
        predicates:
        - Path=/generic-entities
        - Method=GET
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntities/policy
        - name: LimitResponseFieldsForFindEntities
          args:
            policyName: /policies/fields/genericentities/policy
        - name: AddSetsToQuery
      - id: countEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/generic-entities/count
        predicates:
        - Path=/generic-entities/count
        - Method=GET
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/countEntities/policy
        - name: AddSetsToQuery
      - id: findEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/generic-entities/{recordId}
        - Method=GET
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntityById/policy
      - id: updateEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/generic-entities/{recordId}
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 4KB
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateEntityById/policy
      - id: replaceEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/generic-entities/{recordId}
        - Method=PUT
        filters:
        - name: RequestSize
          args:
            maxSize: 4KB
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/replaceEntityById/policy
        - name: AddForbiddenFieldsFromOriginalToPayload
          args:
            policyName: /policies/fields/genericentities/policy
      - id: deleteEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/generic-entities/{recordId}
        - Method=DELETE
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/deleteEntityById/policy
      # relations controller on entity
      - id: getRelationsOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/generic-entities/{recordId}/relations
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: createRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/generic-entities/{recordId}/relations
        - Method=POST
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/generic-entities/{recordId}/relations
        - Method=PATCH
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: deleteRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/generic-entities/{recordId}/relations
        - Method=DELETE
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20

      # relations controller
      - id: createRelation
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=/relations
        - Method=POST
        filters:
        - name: RequestSize
          args:
            maxSize: 4KB
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateAllRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=/relations
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 4KB
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: findRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=/relations
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: countRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations/count
        predicates:
        - Path=/relations/count
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: findRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/relations/{recordId}
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/relations/{recordId}
        - Method=PATCH
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: RequestSize
          args:
            maxSize: 4KB
      - id: replaceRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/relations/{recordId}
        - Method=PUT
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: RequestSize
          args:
            maxSize: 4KB
      - id: deleteRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/relations/{recordId}
        - Method=DELETE
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      #explorer controller
      - id: explorer
        uri: no://op
        predicates:
        - Path=/explorer
        filters:
        - name: SetStatus
          args:
            status: 404
      # kind path mapping
      - id: findEntityByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=/{kindPath}
        - Method=GET
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - RewritePath=/(?<kindPath>/?.*), /generic-entities
        - name: ConvertKindPathToQueryForFindEntities
        - name: LimitResponseFieldsForFindEntities
        - name: AddSetsToQuery
logging:
  level:
    reactor:
      netty: INFO
    org:
      springframework:
        cloud:
          gateway: INFO