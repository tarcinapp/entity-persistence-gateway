app:

  # set the name of your application (e.g. books, recipes, movies, etc..)
  name: entity-persistence-gateway

  # shortcode is going to be used as prefix for generated request id for each request and role names (e.g. tarcinapp.member)
  shortcode: "tarcinapp"

  debug: false

  # a request id will be assigned to each http request for the proxied service. request id will be passed within the header you specify below
  requestHeaders:
    requestId: "X-Request-Id"

  auth:
    #Leave "false" if you dont want to authenticate requests. See .README.
    rs256PublicKey: "false" 

    # Set issuer name of JWT
    issuer: keycloak

    # configure the allowable clock skew in seconds for JWT verification
    clockSkewSeconds: 60

  inbound:
    address: 0.0.0.0
    port: 8081
    baseUri: /api/v1/
    metricsEnabled: true

  # configuration of the host which serves the entity-persistence-service. 
  backend:
    protocol: http
    host: entity-persistence-service
    port: 80
    baseUri: '/'

  # configuration of the opa host
  opa:
    protocol: https
    host: entity-persistence-gateway-policies
    port: 443

  # logging configuration
  logging:
    tarcinapp: INFO
    http: INFO
    gateway: INFO
    redisson: INFO

  # predefined field sets
  fieldsets:
    managed:
      show: id, kind, name, slug, visibility, version, ownerUsers, ownerGroups, ownerUsersCount, ownerGroupsCount, creationDateTime, lastUpdatedDateTime, lastUpdatedBy, createdBy, validFromDateTime, validUntilDateTime, idempotencyKey, viewerUsers, viewerGroups, viewerUsersCount, viewerGroupsCount
    unmanaged:
      hide: slug, visibility, version, ownerUsers, ownerGroups, ownerUsersCount, ownerGroupsCount, creationDateTime, lastUpdatedDateTime, lastUpdatedBy, createdBy, validFromDateTime, validUntilDateTime, idempotencyKey, viewerUsers, viewerGroups, viewerUsersCount, viewerGroupsCount
  
  # predefined queriers
  queries:
    my: "'sets[owners][userIds]='+#userId"
    actives: "'sets[actives]'"
    inactives: "'sets[inactives]'"
    name: "'filter[where][name]=' + #query['name']"
    slug: "'filter[where][slug]=' + #query['slug']"

  # set false if you want to prevent loopback notation in query parameters
  allowLoopbackQueryNotation: true
  
  routes:
    disabled: updateAllEntities, updateAllEntitiesByKindPath

  # Configurations beyond this line are rarely modified. Change them only if you fully understand the impact.

  # base schema used for all managed fields. 
  schemas:
    anyRecordBase: '{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"name":{"type":"string"},"slug":{"type":"string"},"creationDateTime":{"type":"string","format":"date-time"},"lastUpdatedDateTime":{"type":"string","format":"date-time"},"validFromDateTime":{"type":"string","format":"date-time","nullable":true},"validUntilDateTime":{"type":"string","format":"date-time","nullable":true},"visibility":{"type":"string","enum":["public","protected","private"]},"version":{"type":"number"},"lastUpdatedBy":{"type":"string"},"createdBy":{"type":"string"},"ownerUsers":{"type":"array","items":{"type":"string"}},"ownerGroups":{"type":"array","items":{"type":"string"}},"ownerUsersCount":{"type":"number"},"ownerGroupsCount":{"type":"number"},"viewerUsers":{"type":"array","items":{"type":"string"}},"viewerGroups":{"type":"array","items":{"type":"string"}},"viewerUsersCount":{"type":"number"},"viewerGroupsCount":{"type":"number"},"idempotencyKey":{"type":"string"}},"required":["name"]}'
    
  # this map is used as a reference to configure 'management.endpoints.web.exposure.include' value, according to the 'app.inbound.metricsEnabled'
  metricsEndpointsMap:
    "true": gateway,health,metrics
    "false": ""
---

debug: ${app.debug}

server:
  port: ${app.inbound.port}
  address: ${app.inbound.address}
  compression: 
    enabled: true
    mime-types: application/json

---

spring:
  application: 
    name: ${app.name}
  data:
    redis: 
      host: gateway-redis-master
      port: 6379
      database: 0
      password: your-password-from-k8s-secret #Override this field with a value from Kubernetes secret. See .README.
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            #allowedOrigins: "http://localhost:8080"
            allowedMethods: "GET, POST, PUT, PATCH, DELETE"
            allowedHeaders: "Accept, Authorization, Cache-Control, Connection, Content-Type, Host, Origin, Referer, User-Agent, X-Geolocation, X-Requested-With"
            exposedHeaders: "Location, Content-Type"
            allowCredentials: true
            maxAge: 3600
      metrics:
        enabled: ${app.inbound.metricsEnabled}
      filter:
        local-response-cache: 
          enabled: true
      routes:
      # entity controller
      - id: createEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities
        - Method=POST
        filters:
        - name: RequestSize
        - name: CheckIfRouteEnabled
          args:
            maxSize: 1KB
        - RewritePath=${app.inbound.baseUri}generic-entities, ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/createEntity/policy
        - name: AcquireLockForCreation
        - name: AddManagedFieldsInCreation
        - name: ApplyFieldsetConfig
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForFindEntityById
          args:
            policyName: /policies/fields/genericentities/policy
      - id: updateAllEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}generic-entities, ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateAllEntities/policy
        - RemoveRequestHeader=Authorization
      - id: findEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}generic-entities, ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntities/policy
        - name: PreventStringifiedJsonFilter
        - name: ApplyFieldsetConfig
        - name: ConvertToLoopbackQuery
        - name: AddSetsToQuery
        - name: PreventQueryByForbiddenFields
          args:
            policyName: /policies/fields/genericentities/policy
        - RemoveRequestHeader=Authorization
        - name: DropFieldsFromResponseForFindEntities
          args:
            policyName: /policies/fields/genericentities/policy
        - name: DropFieldsFromResponseForFindEntities
          args:
            policyName: /policies/fields/genericentities/policy
      - id: countEntities
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/count
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}generic-entities, ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/countEntities/policy
        - name: AddSetsToQuery
        - RemoveRequestHeader=Authorization
      - id: findEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/{recordId}
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}generic-entities, ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntityById/policy
        - name: ApplyFieldsetConfig
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForFindEntityById
          args:
            policyName: /policies/fields/genericentities/policy
      - id: updateEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/{recordId}
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}generic-entities, ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateEntityById/policy
        - RemoveRequestHeader=Authorization
      - id: replaceEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/{recordId}
        - Method=PUT
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}generic-entities, ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/replaceEntityById/policy
        - name: AddForbiddenFieldsFromOriginalToPayloadInReplace
          args:
            policyName: /policies/fields/genericentities/policy
        - name: AddManagedFieldsFromOriginalToPayloadInReplace
        - RemoveRequestHeader=Authorization
      - id: deleteEntityById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/{recordId}
        - Method=DELETE
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}generic-entities, ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/deleteEntityById/policy
        - RemoveRequestHeader=Authorization
      # relations controller on entity
      - id: getRelationsOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/{recordId}/relations
        - Method=GET
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: createRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/{recordId}/relations
        - Method=POST
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/{recordId}/relations
        - Method=PATCH
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: deleteRelationOnEntity
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}generic-entities/{recordId}/relations
        - Method=DELETE
        filters:
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      # relations controller
      - id: createRelation
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=${app.inbound.baseUri}relations
        - Method=POST
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateAllRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=${app.inbound.baseUri}relations
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: findRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations
        predicates:
        - Path=${app.inbound.baseUri}relations
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: countRelations
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}/relations/count
        predicates:
        - Path=${app.inbound.baseUri}relations/count
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: findRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}relations/{recordId}
        - Method=GET
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      - id: updateRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}relations/{recordId}
        - Method=PATCH
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: RequestSize
          args:
            maxSize: 1KB
      - id: replaceRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}relations/{recordId}
        - Method=PUT
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: RequestSize
          args:
            maxSize: 1KB
      - id: deleteRelationById
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}relations/{recordId}
        - Method=DELETE
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
      #explorer controller
      - id: explorer
        uri: no://op
        predicates:
        - Path=${app.inbound.baseUri}explorer
        filters:
        - name: SetStatus
          args:
            status: 404
      # kind path mapping
      - id: createEntityByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}
        - Method=POST
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*), ${app.backend.baseUri}generic-entities
        - name: PlaceKindNameInRequestForEntityManagement
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: ValidateEntityRequestBody
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/createEntity/policy
        - name: AddManagedFieldsInCreation
        - name: AcquireLockForCreation
        - name: ApplyFieldsetConfig
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForFindEntityById
          args:
            policyName: /policies/fields/genericentities/policy
      - id: findAllEntitiesByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*), ${app.backend.baseUri}generic-entities
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntities/policy
        - name: PreventStringifiedJsonFilter
        - name: ConvertToLoopbackQuery
        - name: ConvertKindPathToQueryForFindEntities
        - name: PreventQueryByForbiddenFields
          args:
            policyName: /policies/fields/genericentities/policy
        - name: ApplyFieldsetConfig
        - name: AddSetsToQuery
        - RemoveRequestHeader=Authorization
        - name: DropFieldsFromResponseForFindEntities
          args:
            policyName: /policies/fields/genericentities/policy
      - id: replaceEntityByIdKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/{recordId}
        - Method=PUT
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*)\/(?<recordId>.*), ${app.backend.baseUri}generic-entities/${recordId}
        - name: PlaceKindNameInRequestForEntityManagement
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: ValidateEntityRequestBody
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/replaceEntityById/policy
        - name: AddForbiddenFieldsFromOriginalToPayloadInReplace
          args:
            policyName: /policies/fields/genericentities/policy
        - name: AddManagedFieldsFromOriginalToPayloadInReplace
        - RemoveRequestHeader=Authorization
      - id: countEntitiesByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/count
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*), ${app.backend.baseUri}generic-entities/count
        - name: ConvertKindPathToQueryForFindEntities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/countEntities/policy
        - name: AddSetsToQuery
        - RemoveRequestHeader=Authorization
      - id: updateAllEntitiesByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*), ${app.backend.baseUri}generic-entities
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateAllEntities/policy
        - RemoveRequestHeader=Authorization
      - id: findEntityByIdByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/{recordId}
        - Method=GET
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*)\/(?<recordId>.*), ${app.backend.baseUri}generic-entities/${recordId}
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/findEntityById/policy
        - RemoveRequestHeader=Authorization
        - name: DropFieldsForFindEntityById
          args:
            policyName: /policies/fields/genericentities/policy
        - LocalResponseCache=30m,500MB
      - id: updateEntityByIdByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/{recordId}
        - Method=PATCH
        filters:
        - name: RequestSize
          args:
            maxSize: 1KB
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*)\/(?<recordId>.*), ${app.backend.baseUri}generic-entities/${recordId}
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: ValidateEntityRequestBody
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/updateEntityById/policy
        - RemoveRequestHeader=Authorization
      - id: deleteEntityByIdByKindPath
        uri: ${app.backend.protocol}://${app.backend.host}:${app.backend.port}
        predicates:
        - Path=${app.inbound.baseUri}{kindPath}/{recordId}
        - Method=DELETE
        filters:
        - name: CheckIfRouteEnabled
        - RewritePath=${app.inbound.baseUri}(?<kindPath>/?.*)\/(?<recordId>.*), ${app.backend.baseUri}generic-entities/${recordId}
        - name: AuthenticateRequest
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
        - name: AuthorizeRequest
          args:
            policyName: /policies/auth/routes/deleteEntityById/policy
        - RemoveRequestHeader=Authorization
  web:
    resources:
      chain:
        enabled: false

---

#
management:
  endpoints:
    web:
      exposure:
        # this section configured automatically according to the value of app.inbound.metricsEnabled value
        include: ${app.metricsEndpointsMap.${app.inbound.metricsEnabled}:''}