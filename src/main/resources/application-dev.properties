# application's port
server.port=8081

app.auth.rs256PublicKey=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwJV1cBEDGLl9KV8Cxor74LEz+kLX8gFp+wb+c9iFuI4M0xi2aXZX7rKmzxDVa1CYYd4SKVsHpd5Q4SSVLO8GJQCxoee9gHVDoUaRQmpk76KrR/GXcfz+Jiu/L/q7ScBFLSd6dacmrrtjs1sN6aAjS4vTgJZ/KdtIR7yHJ330v+PaJse4yg4Uu1ujT2pG06IxNNBE+QIWP2NCSMoKr7xyoc9bU25pTLXWy2xJlyInhhyRoVIJ1g1Lr2q69HslptfqjKAqJ5Qs0LBbRMCZSudoZHy/4VYFq2rwUo4ULFkjfAjKzJE67sb9oG7JjWI7k+01RA4pIm9RWj4NhIxReDxcUQIDAQAB

# backend configuration
#app.backend.protocol=http
#app.backend.host=localhost
#app.backend.port=30009

app.backend.protocol=https
app.backend.host=tarcinapp-entity-persistence-service.h3t4eg.easypanel.host
app.backend.port=443

# policy evaluation point (opa) configuration
app.opa.protocol=https
app.opa.host=tarcinapp-entitypersistencegatewaypolicies.h3t4eg.easypanel.host
app.opa.port=443

# redis configuration for rate limit, and distributed locking
spring.redis.host=localhost
spring.redis.port=30004
spring.redis.database=0
spring.redis.password=72594a2545d13fba7294

# idempotency configuration. 
# The configuration takes a JSON Pointer-like path, such as `/path/to/property`, to specify the desired property or element.
# This notation allows for precise access to parts of a JSON structure, making it a powerful tool for working with JSON data in Java applications.
# You can define multiple paths seperated with comma to choose multiple fields contributing to the idempotency key
app.idempotency.entity.keyfields=/kind,/name,/store/city

# kindPath configuration
app.entityKinds[0].pathMap=books
app.entityKinds[0].name=book
app.entityKinds[1].pathMap=authors
app.entityKinds[1].name=author

# default field set configuration
#app.defaultFieldset: unmanaged
app.fieldsets.bookinfo.show=id,name,author

# What are we going to do with query parameters like filter[foo].
# This notation is specific to notion. We can either
# - use them as they are: false
# - prevent them reach backend.
app.allowLoopbackQueryNotation=false